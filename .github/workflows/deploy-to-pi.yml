name: Build and Deploy to Raspberry Pi

on:
  push:
    branches: [ deploy ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    environment: production  # This enables environment secrets and can require approval
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Raspberry Pi
      run: |
        # Navigate to the app directory
        cd ~/cortana_discord_bot || { echo "App directory not found. Run setup first."; exit 1; }
        
        # Pull latest changes (for docker-compose.yml updates)
        echo "Pulling latest repository changes..."
        git pull origin deploy
        
        # Login to GitHub Container Registry
        echo "Logging into container registry..."
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        
        # Validate required secrets
        echo "üîç Validating required secrets..."
        if [ -z "${{ secrets.BOT_TOKEN }}" ]; then
          echo "‚ùå Error: BOT_TOKEN secret is not set!"
          exit 1
        fi
        
        if [ -z "${{ secrets.SERVER_ID }}" ]; then
          echo "‚ùå Error: SERVER_ID secret is not set!"
          exit 1
        fi
        
        if [ -z "${{ secrets.BEARER_TOKEN }}" ]; then
          echo "‚ùå Error: BEARER_TOKEN secret is not set!"
          exit 1
        fi
        
        echo "‚úÖ All required secrets are set"
        echo "üìã Environment variables to be used:"
        echo "   - BOT_TOKEN: [SET]"
        echo "   - SERVER_ID: [SET]" 
        echo "   - BEARER_TOKEN: [SET]"
        echo "   - CORTANA_API_URL: http://cortana-api:8000"
        
        # Stop existing containers
        echo "Stopping existing containers..."
        docker compose down || true
        
        # Pull latest image
        echo "Pulling latest Docker image..."
        docker compose pull
        
        # Start the application with environment variables
        echo "Starting application with environment variables..."
        BOT_TOKEN="${{ secrets.BOT_TOKEN }}" \
        SERVER_ID="${{ secrets.SERVER_ID }}" \
        BEARER_TOKEN="${{ secrets.BEARER_TOKEN }}" \
        CORTANA_API_URL="http://cortana-api:8000" \
        docker compose up -d
        
        # Clean up old images
        echo "Cleaning up old Docker images..."
        docker image prune -f
        
        # Check if the service is running
        sleep 15
        echo "üîç Checking service status..."
        if docker compose ps | grep -q "cortana-discord-bot.*Up"; then
          echo "‚úÖ Deployment successful! Cortana Discord Bot is running."
          echo "ü§ñ Bot is online and ready to respond to commands."
          echo "üìä Service status:"
          docker compose ps
        else
          echo "‚ùå Deployment failed. Cortana Discord Bot is not running."
          echo "üìã Container status:"
          docker compose ps
          echo "üìÑ Recent logs:"
          docker compose logs --tail=20
          exit 1
        fi
